// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface LiveChatItem {
  clickTrackingParams?: ClickTrackingParams;
  replayChatItemAction: ReplayChatItemAction;
}

export type ClickTrackingParams = string

export interface ReplayChatItemAction {
  actions:             Action[];
  videoOffsetTimeMsec: string;
}

export interface Action {
  clickTrackingParams?:         ClickTrackingParams;
  addChatItemAction?:           AddChatItemAction;
  addLiveChatTickerItemAction?: AddLiveChatTickerItemAction;
}

export interface AddChatItemAction {
  item:      AddChatItemActionItem;
  clientId?: string;
}

export interface AddChatItemActionItem {
  liveChatViewerEngagementMessageRenderer?: LiveChatViewerEngagementMessageRenderer;
  liveChatTextMessageRenderer?:             LiveChatTextMessageRenderer;
  liveChatPaidMessageRenderer?:             LiveChatPaidMessageRenderer;
  liveChatPlaceholderItemRenderer?:         LiveChatPlaceholderItemRenderer;
  liveChatPaidStickerRenderer?:             LiveChatPaidStickerRenderer;
}

export interface LiveChatPaidMessageRenderer {
  id:                       string;
  timestampUsec:            string;
  authorName:               AuthorName;
  authorPhoto:              AuthorPhoto;
  purchaseAmountText:       AuthorName;
  headerBackgroundColor:    number;
  headerTextColor:          number;
  bodyBackgroundColor:      number;
  bodyTextColor:            number;
  authorExternalChannelId:  string;
  authorNameTextColor:      number;
  contextMenuEndpoint:      LiveChatPaidMessageRendererContextMenuEndpoint;
  timestampColor:           number;
  contextMenuAccessibility: Accessibility;
  timestampText:            AuthorName;
  message?:                 LiveChatPaidMessageRendererMessage;
}

export interface AuthorName {
  simpleText: string;
}

export interface AuthorPhoto {
  thumbnails: AuthorPhotoThumbnail[];
}

export interface AuthorPhotoThumbnail {
  url:     string;
  width?:  number;
  height?: number;
}

export interface Accessibility {
  accessibilityData: AccessibilityData;
}

export interface AccessibilityData {
  label: string;
}

export interface LiveChatPaidMessageRendererContextMenuEndpoint {
  commandMetadata:                 CommandMetadata;
  liveChatItemContextMenuEndpoint: LiveChatItemContextMenuEndpoint;
}

export interface CommandMetadata {
  webCommandMetadata: WebCommandMetadata;
}

export interface WebCommandMetadata {
  ignoreNavigation: boolean;
}

export interface LiveChatItemContextMenuEndpoint {
  params: string;
}

export interface LiveChatPaidMessageRendererMessage {
  runs: PurpleRun[];
}

export interface PurpleRun {
  text?:  string;
  emoji?: PurpleEmoji;
}

export interface PurpleEmoji {
  emojiId:     string;
  shortcuts:   string[];
  searchTerms: string[];
  image:       Image;
}

export interface Image {
  thumbnails:    PurpleThumbnail[];
  accessibility: Accessibility;
}

export interface PurpleThumbnail {
  url: string;
}

export interface LiveChatPaidStickerRenderer {
  id:                       string;
  contextMenuEndpoint:      LiveChatPaidMessageRendererContextMenuEndpoint;
  contextMenuAccessibility: Accessibility;
  timestampUsec:            string;
  authorPhoto:              AuthorPhoto;
  authorName:               AuthorName;
  authorExternalChannelId:  string;
  timestampText:            AuthorName;
  sticker:                  Sticker;
  moneyChipBackgroundColor: number;
  moneyChipTextColor:       number;
  purchaseAmountText:       AuthorName;
  stickerDisplayWidth:      number;
  stickerDisplayHeight:     number;
  backgroundColor:          number;
  authorNameTextColor:      number;
}

export interface Sticker {
  thumbnails:    AuthorPhotoThumbnail[];
  accessibility: Accessibility;
}

export interface LiveChatPlaceholderItemRenderer {
  id:            string;
  timestampUsec: string;
}

export interface LiveChatTextMessageRenderer {
  message:                  LiveChatTextMessageRendererMessage;
  authorName:               AuthorName;
  authorPhoto:              AuthorPhoto;
  contextMenuEndpoint:      LiveChatTextMessageRendererContextMenuEndpoint;
  id:                       string;
  timestampUsec:            string;
  authorExternalChannelId:  string;
  contextMenuAccessibility: Accessibility;
  timestampText:            AuthorName;
  authorBadges?:            AuthorBadge[];
}

export interface AuthorBadge {
  liveChatAuthorBadgeRenderer: LiveChatAuthorBadgeRenderer;
}

export interface LiveChatAuthorBadgeRenderer {
  icon:          Icon;
  tooltip:       Tooltip;
  accessibility: Accessibility;
}

export interface Icon {
  iconType: IconType;
}

export enum IconType {
  Moderator = "MODERATOR",
  YoutubeRound = "YOUTUBE_ROUND",
}

export enum Tooltip {
  Moderator = "Moderator",
}

export interface LiveChatTextMessageRendererContextMenuEndpoint {
  clickTrackingParams?:            ClickTrackingParams;
  commandMetadata:                 CommandMetadata;
  liveChatItemContextMenuEndpoint: LiveChatItemContextMenuEndpoint;
}

export interface LiveChatTextMessageRendererMessage {
  runs: FluffyRun[];
}

export interface FluffyRun {
  text?:  string;
  emoji?: FluffyEmoji;
}

export interface FluffyEmoji {
  emojiId:           string;
  shortcuts?:        string[];
  searchTerms?:      string[];
  image:             Sticker;
  supportsSkinTone?: boolean;
  variantIds?:       string[];
  isCustomEmoji?:    boolean;
}

export interface LiveChatViewerEngagementMessageRenderer {
  id:            string;
  timestampUsec: string;
  icon:          Icon;
  message:       LiveChatViewerEngagementMessageRendererMessage;
}

export interface LiveChatViewerEngagementMessageRendererMessage {
  runs: TentacledRun[];
}

export interface TentacledRun {
  text: string;
}

export interface AddLiveChatTickerItemAction {
  item:        AddLiveChatTickerItemActionItem;
  durationSec: string;
}

export interface AddLiveChatTickerItemActionItem {
  liveChatTickerPaidMessageItemRenderer?: LiveChatTickerPaidMessageItemRenderer;
  liveChatTickerPaidStickerItemRenderer?: LiveChatTickerPaidStickerItemRenderer;
}

export interface LiveChatTickerPaidMessageItemRenderer {
  id:                      string;
  amount:                  AuthorName;
  amountTextColor:         number;
  startBackgroundColor:    number;
  endBackgroundColor:      number;
  authorPhoto:             Sticker;
  durationSec:             number;
  showItemEndpoint:        LiveChatTickerPaidMessageItemRendererShowItemEndpoint;
  authorExternalChannelId: string;
  fullDurationSec:         number;
}

export interface LiveChatTickerPaidMessageItemRendererShowItemEndpoint {
  commandMetadata:          CommandMetadata;
  showLiveChatItemEndpoint: PurpleShowLiveChatItemEndpoint;
}

export interface PurpleShowLiveChatItemEndpoint {
  renderer: PurpleRenderer;
}

export interface PurpleRenderer {
  liveChatPaidMessageRenderer: LiveChatPaidMessageRenderer;
}

export interface LiveChatTickerPaidStickerItemRenderer {
  id:                      string;
  authorPhoto:             Sticker;
  startBackgroundColor:    number;
  endBackgroundColor:      number;
  durationSec:             number;
  fullDurationSec:         number;
  showItemEndpoint:        LiveChatTickerPaidStickerItemRendererShowItemEndpoint;
  authorExternalChannelId: string;
  tickerThumbnails:        Sticker[];
}

export interface LiveChatTickerPaidStickerItemRendererShowItemEndpoint {
  commandMetadata:          CommandMetadata;
  showLiveChatItemEndpoint: FluffyShowLiveChatItemEndpoint;
}

export interface FluffyShowLiveChatItemEndpoint {
  renderer: FluffyRenderer;
}

export interface FluffyRenderer {
  liveChatPaidStickerRenderer: LiveChatPaidStickerRenderer;
}